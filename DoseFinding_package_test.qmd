---
title: "DoseFinding_package_test"
format: html
editor: visual
---

```{r}
#| echo: false
require(DoseFinding)
require(ggplot2)

# https://rdrr.io/cran/DoseFinding/f/vignettes/binary_data.Rmd
```

```{r}
#| echo: false
```

Interactive app

```{r}
#| echo: false
DesignMCPModApp()

```


# Dose-finding Binary response
```{r}
#| echo: false

# candidate set of models for the mean response on the logit scale:

logit <- function(p) log(p / (1 - p))
inv_logit <- function(y) 1 / (1 + exp(-y))
doses <- c(0, 1, 2, 3)

mods <- Mods(emax = c(0.25, 1), 
             sigEmax = rbind(c(1, 3), c(2.5, 4)), 
             betaMod = c(1.1, 1.1),
             placEff = logit(0.7), 
             maxEff = logit(0.49)-logit(0.7),
             doses = doses)
plotMods(mods)
## plot candidate models on probability scale
plotMods(mods, trafo = inv_logit)


```


```{r}
#| echo: false

## for simplicity: contrasts as discussed in the previous section
contMat <- optContr(mods, w=1)

## we need each alternative model as a separate object
alt_model_par <- list(emax = 0.25, emax = 1, sigEmax = c(1, 3),
                      sigEmax = c(2.5, 4), betaMod = c(1.1, 1.1))
alt_common_par <- list(placEff = logit(0.7), maxEff = logit(0.49)-logit(0.7),
                       doses = doses)
## this is a bit hackish because we need to pass named arguments to Mods()
alt_mods <- lapply(seq_along(alt_model_par), function(i) {
  do.call(Mods, append(alt_model_par[i], alt_common_par))
})

prop_true_var_mu_hat <- lapply(seq_along(alt_model_par), function(i) {
  ## mean responses on logit scale
  lo <- getResp(do.call(Mods, append(alt_model_par[i], alt_common_par)))
  p <- inv_logit(lo) # mean responses on probability scale
  v <- 1 / (p * (1-p)) # element-wise variance of mu_hat up to a factor of 1/n
  return(as.numeric(v)) # drop unnecessary attributes
})

min_power_at_group_size <- function(n) {
  pwr <- mapply(function(m, v) powMCT(contMat, alpha=0.1, altModels=m, S=diag(v/n), df=Inf),
                alt_mods, prop_true_var_mu_hat)
  return(min(pwr))
}

n <- seq(5, 80, by=5)
pwrs <- sapply(n, min_power_at_group_size)
qplot(n, pwrs, geom="line", ylab="Min. Power over candidate set")+
  scale_y_continuous(breaks = seq(0,1, by=0.1), limits = c(0,1))


```




